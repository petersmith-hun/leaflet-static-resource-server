version: 2.1

orbs:
  jira: circleci/jira@2.2.0
  gh: circleci/github-cli@2.7.0

# Common parameters for CircleCI build config
parameters:
  app_name:
    type: string
    default: lsrs
  release_tag_pattern:
    type: string
    default: 's/v[0-9]+\.[0-9]+\.[0-9]+\-([0-9]+)\.release/\1/'
  distribution_archive:
    type: string
    default: leaflet-static-resource-server-release.tar.gz
  distribution_source_dir:
    type: string
    default: dist/
  workspace_dir:
    type: string
    default: /tmp/ws_store
  version_file:
    type: string
    default: version

# Reusable commands
commands:

  # Command definition for publishing GitHub releases/tags
  github_release:
    parameters:
      release-type:
        type: enum
        default: "rc"
        enum: ["rc", "release"]
    steps:
      - checkout
      - attach_workspace:
          at: << pipeline.parameters.workspace_dir >>
      - gh/setup
      - run:
          name: "Publish Release on GitHub"
          command: |
            [[ "<< parameters.release-type >>" = "release" ]] && VERSION_QUALIFIER=".release" || VERSION_QUALIFIER=""
            VERSION=v$(cat << pipeline.parameters.workspace_dir >>/<< pipeline.parameters.version_file >>)$VERSION_QUALIFIER
            gh release create ${VERSION} --target ${CIRCLE_SHA1} --title ${VERSION} << pipeline.parameters.workspace_dir >>/<< pipeline.parameters.distribution_archive >>

executors:
  node:
    docker:
      - image: cimg/node:22.15
  python:
    docker:
      - image: cimg/python:3.12
  base:
    docker:
      - image: cimg/base:stable

jobs:

  # Leaflet Static Resource Server - Build and test application
  build:
    parameters:
      release-type:
        type: enum
        default: "rc"
        enum: ["rc", "release"]
    executor: node
    steps:
      - checkout
      - run:
          name: Set build number
          command: |
            case $CIRCLE_BRANCH in
              master) echo 'export BUILD_NUMBER="rc.<< pipeline.number >>"' >> $BASH_ENV ;;
              deploy) echo 'export BUILD_NUMBER=$((`git fetch --tags && git tag --sort=-taggerdate | grep release | sed -E "<< pipeline.parameters.release_tag_pattern >>" | sort -nr | head -n 1` + 1))' >> $BASH_ENV ;;
              *) echo 'export BUILD_NUMBER="snapshot"' >> $BASH_ENV ;;
            esac
            source $BASH_ENV
            echo "Determined BUILD_NUMBER=$BUILD_NUMBER"
      - run:
          name: Extract version number
          command: |
            source $BASH_ENV
            BASE_VERSION=$(cat package.json | grep version | head -n 1 | sed -E "s/.*([0-9]+\.[0-9]+\.[0-9]+).*/\1/")
            VERSION=$BASE_VERSION-$BUILD_NUMBER
            echo "Extracted version $VERSION"
            echo "export VERSION='$VERSION'" >> $BASH_ENV
            mkdir << pipeline.parameters.workspace_dir >>
            echo $VERSION >> << pipeline.parameters.workspace_dir >>/<< pipeline.parameters.version_file >>
      - run:
          name: Update project version
          command: |
            npm config set git-tag-version false
            npm version $VERSION
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Execute LSRS unit tests
          command: |
            mkdir logs
            npm run test
      - run:
          name: Execute LSRS acceptance tests
          command: npm run acceptance
      - run:
          name: Transpile code
          command: npm run build
      - run:
          name: Clean-up node_modules
          command: npm prune --omit=dev
      - setup_remote_docker
      - run:
          name: Package and upload Docker image
          command: |
            source $BASH_ENV
            
            docker login ${LEAFLET_DOCKER_REGISTRY_HOST} \
              --username ${LEAFLET_DOCKER_REGISTRY_USERNAME} \
              --password ${LEAFLET_DOCKER_REGISTRY_PASSWORD}

            version_tag=${LEAFLET_DOCKER_REGISTRY_HOST}/apps/<< pipeline.parameters.app_name >>:${VERSION}
            docker build --tag $version_tag .
            docker push $version_tag

            if [[ "<< parameters.release-type >>" = "release" ]]; then
              latest_tag=${LEAFLET_DOCKER_REGISTRY_HOST}/apps/<< pipeline.parameters.app_name >>:latest
              docker tag $version_tag $latest_tag
              docker push $latest_tag
            fi
      - run:
          name: Archive dist code
          command: tar -czvf << pipeline.parameters.workspace_dir >>/<< pipeline.parameters.distribution_archive >> << pipeline.parameters.distribution_source_dir >>
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_dir >>
          paths:
            - << pipeline.parameters.distribution_archive >>
            - << pipeline.parameters.version_file >>

  # Leaflet Static Resource Server - Deploy to production
  deploy:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: << pipeline.parameters.workspace_dir >>
      - run:
          command: echo 'export PROJECT_VERSION="$(cat << pipeline.parameters.workspace_dir >>/<< pipeline.parameters.version_file >>)"' >> $BASH_ENV
          name: Set project version
      - run:
          command: pip install domino-cli
          name: Install Domino CLI
      - run:
          command: |
            set -e
            
            echo "Requesting access token ..."
            token="$(domino-cli --cicd auth --generate-token)" || exit 1
            export DOMINO_CLI_PREAUTHORIZED_TOKEN=$token
            
            domino-cli --cicd import
            echo "Deployment definition successfully imported"
            
            domino-cli --cicd deploy << pipeline.parameters.app_name >> ${PROJECT_VERSION}
            echo "Successfully deployed application << pipeline.parameters.app_name >> v${PROJECT_VERSION}"
            
            domino-cli --cicd start << pipeline.parameters.app_name >>
            echo "Successfully started application << pipeline.parameters.app_name >>"

          name: Deploy via Domino

  # Leaflet Static Resource Server - Publish tag (and release) on GitHub for RC versions
  publish-github-rc:
    executor: base
    steps:
      - github_release:
          release-type: rc

  # Leaflet Static Resource Server - Publish tag (and release) on GitHub for RELEASE versions
  publish-github-release:
    executor: base
    steps:
      - github_release:
          release-type: release

workflows:

  leaflet-lsrs-rc:
    jobs:

      - build:
          release-type: rc
          context:
            - common-tech
            - docker-registry
          filters:
            branches:
              only:
                - master
          post-steps:
            - jira/notify:
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>

      - publish-github-rc:
          context:
            - common-tech
          requires:
            - build

  leaflet-lsrs-release:
    jobs:

      - build:
          release-type: release
          context:
            - common-tech
            - docker-registry
          filters:
            branches:
              only:
                - deploy
          post-steps:
            - jira/notify:
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>

      - deploy-approval:
          type: approval
          requires:
            - build

      - deploy:
          context:
            - common-tech
            - domino
          requires:
            - deploy-approval
          post-steps:
            - jira/notify:
                environment: production
                environment_type: production
                job_type: deployment
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>

      - publish-github-release:
          context:
            - common-tech
          requires:
            - deploy

  version: 2

